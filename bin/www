#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('contact-us:server');
var http = require('http');
var fs = require('fs');
var config = require('../config');

/**
 * Get port from environment and store in Express.
 */


// codeReview(Anurag): Not sure why this is needed. Do research
// app.set('port', port);

/**
 * Create HTTP server.
 */

var httpPort = normalizePort(process.env.PORT || config.server.httpPort);
var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onHttpError);
httpServer.on('listening', onHttpListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onHttpError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
  * Create HTTPS server.
  */
var https = require('https');
var privateKey = fs.readFileSync('encryption/private.key'),
  primaryCertificate = fs.readFileSync('encryption/primary.crt'),
  intermediateCertificate = fs.readFileSync('encryption/intermediate.crt');

var credentials = {
  key: privateKey,
  cert: primaryCertificate,
  ca: intermediateCertificate
};
var httpsPort = normalizePort(process.env.PORT || config.server.httpsPort);
var httpsServer = https.createServer(credentials, app);

httpsServer.listen(httpsPort);
httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string'
    ? 'Pipe ' + httpsPort
    : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
